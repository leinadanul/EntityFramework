// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using projectef;

#nullable disable

namespace projectef.Migrations
{
    [DbContext(typeof(TaskContext))]
    partial class TaskContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("projectef.Model.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("ea9301c2-0dfd-45e6-ae1a-491c67eed101"),
                            Name = "Task to do",
                            Weight = 20
                        },
                        new
                        {
                            CategoryId = new Guid("ea9301c2-0dfd-45e6-ae1a-491c67eed102"),
                            Name = "Personal task",
                            Weight = 50
                        });
                });

            modelBuilder.Entity("projectef.Model.Task", b =>
                {
                    b.Property<Guid>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaskPrority")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("TaskId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Task", (string)null);

                    b.HasData(
                        new
                        {
                            TaskId = new Guid("ea9301c2-0dfd-45e6-ae1a-491c67eed110"),
                            CategoryId = new Guid("ea9301c2-0dfd-45e6-ae1a-491c67eed101"),
                            DateCreation = new DateTime(2023, 5, 17, 20, 32, 59, 884, DateTimeKind.Local).AddTicks(4756),
                            TaskPrority = 1,
                            Title = "Pay public Services"
                        },
                        new
                        {
                            TaskId = new Guid("ea9301c2-0dfd-45e6-ae1a-491c67eed111"),
                            CategoryId = new Guid("ea9301c2-0dfd-45e6-ae1a-491c67eed102"),
                            DateCreation = new DateTime(2023, 5, 17, 20, 32, 59, 884, DateTimeKind.Local).AddTicks(4772),
                            TaskPrority = 0,
                            Title = "Finish watching the movie"
                        });
                });

            modelBuilder.Entity("projectef.Model.Task", b =>
                {
                    b.HasOne("projectef.Model.Category", "Category")
                        .WithMany("Tasks")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("projectef.Model.Category", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
